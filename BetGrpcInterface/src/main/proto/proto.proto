syntax = "proto3";
package ru.gafarov.bet.grpcInterface;

import "google/protobuf/timestamp.proto";

message Bet {
  int64 id = 1;
  string wager = 2;
  google.protobuf.Timestamp finishDate = 3;
  User initiator = 4;
  User opponent = 5;
  string definition = 6;
  BetStatus initiatorStatus = 7;
  BetStatus opponentStatus = 8;
  repeated BetStatus initiatorNextStatuses = 9;
  repeated BetStatus opponentNextStatuses = 10;
}

message DraftBet {
  int64 id = 1;
  string wager = 2;
  int32 daysToFinish = 3;
  string opponentName = 5;
  int32 opponentCode = 6;
  string definition = 7;
  google.protobuf.Timestamp finishDate = 8;
  User initiator = 9;
}

message User {
  int64 id = 1;
  string username = 2;
  int32 code = 3;
  int64 chatId = 4;
  ChatStatus chatStatus = 5;
}

message ChangeStatusBetMessage {
  User user = 1;
  Bet bet = 2;
  BetStatus newStatus = 3;
}

message BotMessage {
  int64 id = 1;
  int32 tgMessageId = 2;
  User user = 3;
  BotMessageType type = 4;
  DraftBet draftBet = 5;
  bool isDeleted = 6;
}

message BotMessages {
  repeated BotMessage botMessage = 1;
}

message Subscribe {
  User subscriber = 1;
  User subscribed = 2;
}
message ResponseMessage {
  string messageForInitiator = 1;
  string messageForOpponent = 2;
  Status status = 3;
  User user = 4;
  Bet bet = 5;
  DraftBet draftBet = 6;
  repeated Bet bets = 7;
}
message Response {
  Status status = 1;
}

message ResponseBotMessage {
  Status status = 1;
  BotMessage botMessage = 2;
  repeated BotMessage botMessages = 3;
}

message ResponseDraftBet {
  Status status = 1;
  DraftBet draftBet = 2;
}

message ResponseUser {
  Status status = 1;
  User user = 2;
  repeated User users = 3;
}

message Bets {
  repeated Bet bets = 1;
}

enum Status {
  SUCCESS = 0;
  NOT_SUCCESS = 1;
  NOT_FOUND = 3;
  REDUNDANT = 4;
  ERROR = 2;
}

enum BetStatus {
  OFFERED = 0; // Предложен
  NOT_READ = 1; // Не рассмотрен оппонентом
  ACCEPTED = 2; // Принят
  WIN = 3;    // Победил
  LOSE = 4;   // Проиграл
  STANDOFF = 5;   // Ничья
  WAGERPAID = 6;  // Выигрыш оплатил
  WAGERRECIEVED = 7;  // Выигрыш получил
  CANCELED = 8;  // Спор отклонен
}

enum ChatStatus {
  START = 0;
  WAIT_OPPONENT_NAME = 1;
  WAIT_OPPONENT_CODE = 5;
  WAIT_DEFINITION = 2;
  WAIT_WAGER = 3;
  WAIT_FINISH_DATE = 4;
  WAIT_APPROVE = 6;
}

enum BotMessageType {
  ENTER_USERNAME = 0;
  CHOOSE_OPPONENT = 7;
  ENTER_CODE = 1;
  ENTER_WAGER = 2;
  ENTER_DEFINITION = 3;
  ENTER_FINISH_DATE = 4;
  WRONG_FINISH_DATE = 5;
  CODE_WRONG_ENTER_USERNAME = 6;
  BET = 8;
  YOU_HAVE_NOT_BETS = 9;
  MY_REFERENCE = 10;
  MY_REFERENCE_INFO = 11;
  ADD_OPPONENT = 12;
  REDUNDANT_OPPONENT = 13;
}

service BetService {
  rpc addUser(User) returns (ResponseUser);
  rpc getUser(User) returns (ResponseUser);
  rpc findFriend(Subscribe) returns (ResponseUser);
  rpc getFriends(User) returns (ResponseUser);
  rpc changeChatStatus(User) returns (ResponseMessage);
  rpc addBet(Bet) returns (ResponseMessage);
  rpc addDraftBet(DraftBet) returns (ResponseDraftBet);
  rpc getDraftBet(DraftBet) returns (ResponseDraftBet);
  rpc getLastDraftBet(User) returns (ResponseDraftBet);
  rpc deleteDraftBet(DraftBet) returns (ResponseDraftBet);
  rpc setOpponentName(DraftBet) returns (ResponseDraftBet);
  rpc setOpponentCode(DraftBet) returns (ResponseDraftBet);
  rpc setDefinition(DraftBet) returns (ResponseDraftBet);
  rpc setWager(DraftBet) returns (ResponseDraftBet);
  rpc setFinishDate(DraftBet) returns (ResponseDraftBet);
  rpc changeStatusBet(ChangeStatusBetMessage) returns (ResponseMessage);
  rpc getActiveBets(User) returns (ResponseMessage);
  rpc getBet(Bet) returns (ResponseMessage);
  rpc notifyOfExpiredBets(Bets) returns (ResponseMessage);
  rpc saveBotMessage(BotMessage) returns (ResponseMessage);
  rpc getBotMessage(BotMessage) returns (ResponseBotMessage);
  rpc getBotMessages(DraftBet) returns (ResponseBotMessage);
  rpc deleteBotMessages(BotMessages) returns (ResponseBotMessage);
  rpc addSubscribe(Subscribe) returns (Response);
}