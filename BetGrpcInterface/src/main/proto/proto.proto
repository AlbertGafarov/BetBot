syntax = "proto3";
package ru.gafarov.bet.grpcInterface;

import "google/protobuf/timestamp.proto";

message Bet {
  int64 id = 1;
  string wager = 2;
  google.protobuf.Timestamp finishDate = 3;
  User initiator = 4;
  User opponent = 5;
  string definition = 6;
  BetStatus initiatorStatus = 7;
  BetStatus opponentStatus = 8;
  repeated BetStatus initiatorNextStatuses = 9;
  repeated BetStatus opponentNextStatuses = 10;
}

message DraftBet {
  int64 id = 1;
  string wager = 2;
  int32 daysToFinish = 3;
  string opponentName = 5;
  int32 opponentCode = 6;
  string definition = 7;
  google.protobuf.Timestamp finishDate = 8;
}

message User {
  int64 id = 1;
  string username = 2;
  int32 code = 3;
  int64 chatId = 4;
  ChatStatus chatStatus = 5;
  DraftBet draftBet = 6;
}

message ChangeStatusBetMessage {
  User user = 1;
  Bet bet = 2;
  BetStatus newStatus = 3;
}

message ResponseMessage {
  string messageForInitiator = 1;
  string messageForOpponent = 2;
  RequestStatus requestStatus = 3;
  User user = 4;
  Bet bet = 5;
  DraftBet draftBet = 6;
  repeated Bet bets = 7;
}

enum RequestStatus {
  SUCCESS = 0;
  NOT_SUCCESS = 1;
  ERROR = 2;
}

enum BetStatus {
  OFFERED = 0; // Предложен
  NOT_READ = 1; // Не рассмотрен оппонентом
  ACCEPTED = 2; // Принят
  WIN = 3;    // Победил
  LOSE = 4;   // Проиграл
  STANDOFF = 5;   // Ничья
  WAGERPAID = 6;  // Выигрыш оплатил
  WAGERRECIEVED = 7;  // Выигрыш получил
  CANCELED = 8;  // Спор отклонен
}

enum ChatStatus {
  START = 0;
  WAIT_OPPONENT_NAME = 1;
  WAIT_OPPONENT_CODE = 5;
  WAIT_DEFINITION = 2;
  WAIT_WAGER = 3;
  WAIT_FINISH_DATE = 4;
  WAIT_APPROVE = 6;
}


service BetService {
  rpc addUser(User) returns (ResponseMessage);
  rpc getUser(User) returns (ResponseMessage);
  rpc changeChatStatus(User) returns (ResponseMessage);
  rpc addBet(Bet) returns (ResponseMessage);
  rpc addDraftBet(DraftBet) returns (ResponseMessage);
  rpc setOpponentName(DraftBet) returns (ResponseMessage);
  rpc setOpponentCode(DraftBet) returns (ResponseMessage);
  rpc setDefinition(DraftBet) returns (ResponseMessage);
  rpc setWager(DraftBet) returns (ResponseMessage);
  rpc setFinishDate(DraftBet) returns (ResponseMessage);
  rpc changeStatusBet(ChangeStatusBetMessage) returns (ResponseMessage);
  rpc getActiveBets(User) returns (ResponseMessage);
}